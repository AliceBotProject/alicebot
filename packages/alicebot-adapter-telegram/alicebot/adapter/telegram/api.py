"""Telegram API 定义。"""
# autogenerated by codegen.py, do not edit manually.
# ruff: noqa: D101, D102, A002, UP007
# pylint: disable=redefined-builtin, missing-class-docstring, too-many-locals
# mypy: ignore-errors
# pyright: reportDeprecated=false

from abc import ABC, abstractmethod
from typing import Any, TypeVar, Union

from .model import (
    AcceptedGiftTypes,
    BotCommand,
    BotCommandScope,
    BotDescription,
    BotName,
    BotShortDescription,
    BusinessConnection,
    ChatAdministratorRights,
    ChatFullInfo,
    ChatInviteLink,
    ChatMember,
    ChatPermissions,
    File,
    ForceReply,
    ForumTopic,
    GameHighScore,
    Gifts,
    InlineKeyboardMarkup,
    InlineQueryResult,
    InlineQueryResultsButton,
    InputFile,
    InputMedia,
    InputMediaAudio,
    InputMediaDocument,
    InputMediaPhoto,
    InputMediaVideo,
    InputPaidMedia,
    InputPollOption,
    InputProfilePhoto,
    InputSticker,
    InputStoryContent,
    LabeledPrice,
    LinkPreviewOptions,
    MaskPosition,
    MenuButton,
    Message,
    MessageEntity,
    MessageId,
    OwnedGifts,
    PassportElementError,
    Poll,
    PreparedInlineMessage,
    ReactionType,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    ReplyParameters,
    SentWebAppMessage,
    ShippingOption,
    StarAmount,
    StarTransactions,
    Sticker,
    StickerSet,
    Story,
    StoryArea,
    Update,
    User,
    UserChatBoosts,
    UserProfilePhotos,
    WebhookInfo,
)

_T = TypeVar("_T")


class TelegramAPIBase(ABC):
    @abstractmethod
    async def call_api(
        self,
        api: str,
        *,
        response_type: Union[type[_T], Any, None] = None,
        **params: Any,
    ) -> Any: ...


class TelegramAPI(TelegramAPIBase, ABC):
    async def get_updates(
        self,
        *,
        offset: int | None = None,
        limit: int | None = None,
        timeout: int | None = None,
        allowed_updates: list[str] | None = None,
    ) -> list[Update]:
        return await self.call_api(
            "getUpdates",
            response_type=list[Update],
            offset=offset,
            limit=limit,
            timeout=timeout,
            allowed_updates=allowed_updates,
        )

    async def set_webhook(
        self,
        *,
        url: str,
        certificate: InputFile | None = None,
        ip_address: str | None = None,
        max_connections: int | None = None,
        allowed_updates: list[str] | None = None,
        drop_pending_updates: bool | None = None,
        secret_token: str | None = None,
    ) -> bool:
        return await self.call_api(
            "setWebhook",
            response_type=bool,
            url=url,
            certificate=certificate,
            ip_address=ip_address,
            max_connections=max_connections,
            allowed_updates=allowed_updates,
            drop_pending_updates=drop_pending_updates,
            secret_token=secret_token,
        )

    async def delete_webhook(self, *, drop_pending_updates: bool | None = None) -> bool:
        return await self.call_api(
            "deleteWebhook",
            response_type=bool,
            drop_pending_updates=drop_pending_updates,
        )

    async def get_webhook_info(self) -> WebhookInfo:
        return await self.call_api("getWebhookInfo", response_type=WebhookInfo)

    async def get_me(self) -> User:
        return await self.call_api("getMe", response_type=User)

    async def log_out(self) -> bool:
        return await self.call_api("logOut", response_type=bool)

    async def close(self) -> bool:
        return await self.call_api("close", response_type=bool)

    async def send_message(
        self,
        *,
        chat_id: Union[int, str],
        text: str,
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        parse_mode: str | None = None,
        entities: list[MessageEntity] | None = None,
        link_preview_options: LinkPreviewOptions | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendMessage",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            text=text,
            parse_mode=parse_mode,
            entities=entities,
            link_preview_options=link_preview_options,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def forward_message(
        self,
        *,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_id: int,
        message_thread_id: int | None = None,
        video_start_timestamp: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
    ) -> Message:
        return await self.call_api(
            "forwardMessage",
            response_type=Message,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            from_chat_id=from_chat_id,
            video_start_timestamp=video_start_timestamp,
            disable_notification=disable_notification,
            protect_content=protect_content,
            message_id=message_id,
        )

    async def forward_messages(
        self,
        *,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_ids: list[int],
        message_thread_id: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
    ) -> list[MessageId]:
        return await self.call_api(
            "forwardMessages",
            response_type=list[MessageId],
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            from_chat_id=from_chat_id,
            message_ids=message_ids,
            disable_notification=disable_notification,
            protect_content=protect_content,
        )

    async def copy_message(
        self,
        *,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_id: int,
        message_thread_id: int | None = None,
        video_start_timestamp: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        show_caption_above_media: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> MessageId:
        return await self.call_api(
            "copyMessage",
            response_type=MessageId,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            from_chat_id=from_chat_id,
            message_id=message_id,
            video_start_timestamp=video_start_timestamp,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            show_caption_above_media=show_caption_above_media,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def copy_messages(
        self,
        *,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_ids: list[int],
        message_thread_id: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        remove_caption: bool | None = None,
    ) -> list[MessageId]:
        return await self.call_api(
            "copyMessages",
            response_type=list[MessageId],
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            from_chat_id=from_chat_id,
            message_ids=message_ids,
            disable_notification=disable_notification,
            protect_content=protect_content,
            remove_caption=remove_caption,
        )

    async def send_photo(
        self,
        *,
        chat_id: Union[int, str],
        photo: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        show_caption_above_media: bool | None = None,
        has_spoiler: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendPhoto",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            photo=photo,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            show_caption_above_media=show_caption_above_media,
            has_spoiler=has_spoiler,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_audio(
        self,
        *,
        chat_id: Union[int, str],
        audio: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        duration: int | None = None,
        performer: str | None = None,
        title: str | None = None,
        thumbnail: Union[InputFile, str] | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendAudio",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            audio=audio,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            duration=duration,
            performer=performer,
            title=title,
            thumbnail=thumbnail,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_document(
        self,
        *,
        chat_id: Union[int, str],
        document: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        thumbnail: Union[InputFile, str] | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        disable_content_type_detection: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendDocument",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            document=document,
            thumbnail=thumbnail,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            disable_content_type_detection=disable_content_type_detection,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_video(
        self,
        *,
        chat_id: Union[int, str],
        video: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        duration: int | None = None,
        width: int | None = None,
        height: int | None = None,
        thumbnail: Union[InputFile, str] | None = None,
        cover: Union[InputFile, str] | None = None,
        start_timestamp: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        show_caption_above_media: bool | None = None,
        has_spoiler: bool | None = None,
        supports_streaming: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendVideo",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            video=video,
            duration=duration,
            width=width,
            height=height,
            thumbnail=thumbnail,
            cover=cover,
            start_timestamp=start_timestamp,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            show_caption_above_media=show_caption_above_media,
            has_spoiler=has_spoiler,
            supports_streaming=supports_streaming,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_animation(
        self,
        *,
        chat_id: Union[int, str],
        animation: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        duration: int | None = None,
        width: int | None = None,
        height: int | None = None,
        thumbnail: Union[InputFile, str] | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        show_caption_above_media: bool | None = None,
        has_spoiler: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendAnimation",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            animation=animation,
            duration=duration,
            width=width,
            height=height,
            thumbnail=thumbnail,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            show_caption_above_media=show_caption_above_media,
            has_spoiler=has_spoiler,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_voice(
        self,
        *,
        chat_id: Union[int, str],
        voice: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        duration: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendVoice",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            voice=voice,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            duration=duration,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_video_note(
        self,
        *,
        chat_id: Union[int, str],
        video_note: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        duration: int | None = None,
        length: int | None = None,
        thumbnail: Union[InputFile, str] | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendVideoNote",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            video_note=video_note,
            duration=duration,
            length=length,
            thumbnail=thumbnail,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_paid_media(
        self,
        *,
        chat_id: Union[int, str],
        star_count: int,
        media: list[InputPaidMedia],
        business_connection_id: str | None = None,
        payload: str | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        show_caption_above_media: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendPaidMedia",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            star_count=star_count,
            media=media,
            payload=payload,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            show_caption_above_media=show_caption_above_media,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_media_group(
        self,
        *,
        chat_id: Union[int, str],
        media: Union[
            list[InputMediaAudio],
            list[InputMediaDocument],
            list[InputMediaPhoto],
            list[InputMediaVideo],
        ],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
    ) -> list[Message]:
        return await self.call_api(
            "sendMediaGroup",
            response_type=list[Message],
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            media=media,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
        )

    async def send_location(
        self,
        *,
        chat_id: Union[int, str],
        latitude: float,
        longitude: float,
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        horizontal_accuracy: float | None = None,
        live_period: int | None = None,
        heading: int | None = None,
        proximity_alert_radius: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendLocation",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            latitude=latitude,
            longitude=longitude,
            horizontal_accuracy=horizontal_accuracy,
            live_period=live_period,
            heading=heading,
            proximity_alert_radius=proximity_alert_radius,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_venue(
        self,
        *,
        chat_id: Union[int, str],
        latitude: float,
        longitude: float,
        title: str,
        address: str,
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        foursquare_id: str | None = None,
        foursquare_type: str | None = None,
        google_place_id: str | None = None,
        google_place_type: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendVenue",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            latitude=latitude,
            longitude=longitude,
            title=title,
            address=address,
            foursquare_id=foursquare_id,
            foursquare_type=foursquare_type,
            google_place_id=google_place_id,
            google_place_type=google_place_type,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_contact(
        self,
        *,
        chat_id: Union[int, str],
        phone_number: str,
        first_name: str,
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        last_name: str | None = None,
        vcard: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendContact",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            phone_number=phone_number,
            first_name=first_name,
            last_name=last_name,
            vcard=vcard,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_poll(
        self,
        *,
        chat_id: Union[int, str],
        question: str,
        options: list[InputPollOption],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        question_parse_mode: str | None = None,
        question_entities: list[MessageEntity] | None = None,
        is_anonymous: bool | None = None,
        type: str | None = None,
        allows_multiple_answers: bool | None = None,
        correct_option_id: int | None = None,
        explanation: str | None = None,
        explanation_parse_mode: str | None = None,
        explanation_entities: list[MessageEntity] | None = None,
        open_period: int | None = None,
        close_date: int | None = None,
        is_closed: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendPoll",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            question=question,
            question_parse_mode=question_parse_mode,
            question_entities=question_entities,
            options=options,
            is_anonymous=is_anonymous,
            type=type,
            allows_multiple_answers=allows_multiple_answers,
            correct_option_id=correct_option_id,
            explanation=explanation,
            explanation_parse_mode=explanation_parse_mode,
            explanation_entities=explanation_entities,
            open_period=open_period,
            close_date=close_date,
            is_closed=is_closed,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_dice(
        self,
        *,
        chat_id: Union[int, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        emoji: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendDice",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            emoji=emoji,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def send_chat_action(
        self,
        *,
        chat_id: Union[int, str],
        action: str,
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
    ) -> bool:
        return await self.call_api(
            "sendChatAction",
            response_type=bool,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            action=action,
        )

    async def set_message_reaction(
        self,
        *,
        chat_id: Union[int, str],
        message_id: int,
        reaction: list[ReactionType] | None = None,
        is_big: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "setMessageReaction",
            response_type=bool,
            chat_id=chat_id,
            message_id=message_id,
            reaction=reaction,
            is_big=is_big,
        )

    async def get_user_profile_photos(
        self, *, user_id: int, offset: int | None = None, limit: int | None = None
    ) -> UserProfilePhotos:
        return await self.call_api(
            "getUserProfilePhotos",
            response_type=UserProfilePhotos,
            user_id=user_id,
            offset=offset,
            limit=limit,
        )

    async def set_user_emoji_status(
        self,
        *,
        user_id: int,
        emoji_status_custom_emoji_id: str | None = None,
        emoji_status_expiration_date: int | None = None,
    ) -> bool:
        return await self.call_api(
            "setUserEmojiStatus",
            response_type=bool,
            user_id=user_id,
            emoji_status_custom_emoji_id=emoji_status_custom_emoji_id,
            emoji_status_expiration_date=emoji_status_expiration_date,
        )

    async def get_file(self, *, file_id: str) -> File:
        return await self.call_api("getFile", response_type=File, file_id=file_id)

    async def ban_chat_member(
        self,
        *,
        chat_id: Union[int, str],
        user_id: int,
        until_date: int | None = None,
        revoke_messages: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "banChatMember",
            response_type=bool,
            chat_id=chat_id,
            user_id=user_id,
            until_date=until_date,
            revoke_messages=revoke_messages,
        )

    async def unban_chat_member(
        self,
        *,
        chat_id: Union[int, str],
        user_id: int,
        only_if_banned: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "unbanChatMember",
            response_type=bool,
            chat_id=chat_id,
            user_id=user_id,
            only_if_banned=only_if_banned,
        )

    async def restrict_chat_member(
        self,
        *,
        chat_id: Union[int, str],
        user_id: int,
        permissions: ChatPermissions,
        use_independent_chat_permissions: bool | None = None,
        until_date: int | None = None,
    ) -> bool:
        return await self.call_api(
            "restrictChatMember",
            response_type=bool,
            chat_id=chat_id,
            user_id=user_id,
            permissions=permissions,
            use_independent_chat_permissions=use_independent_chat_permissions,
            until_date=until_date,
        )

    async def promote_chat_member(
        self,
        *,
        chat_id: Union[int, str],
        user_id: int,
        is_anonymous: bool | None = None,
        can_manage_chat: bool | None = None,
        can_delete_messages: bool | None = None,
        can_manage_video_chats: bool | None = None,
        can_restrict_members: bool | None = None,
        can_promote_members: bool | None = None,
        can_change_info: bool | None = None,
        can_invite_users: bool | None = None,
        can_post_stories: bool | None = None,
        can_edit_stories: bool | None = None,
        can_delete_stories: bool | None = None,
        can_post_messages: bool | None = None,
        can_edit_messages: bool | None = None,
        can_pin_messages: bool | None = None,
        can_manage_topics: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "promoteChatMember",
            response_type=bool,
            chat_id=chat_id,
            user_id=user_id,
            is_anonymous=is_anonymous,
            can_manage_chat=can_manage_chat,
            can_delete_messages=can_delete_messages,
            can_manage_video_chats=can_manage_video_chats,
            can_restrict_members=can_restrict_members,
            can_promote_members=can_promote_members,
            can_change_info=can_change_info,
            can_invite_users=can_invite_users,
            can_post_stories=can_post_stories,
            can_edit_stories=can_edit_stories,
            can_delete_stories=can_delete_stories,
            can_post_messages=can_post_messages,
            can_edit_messages=can_edit_messages,
            can_pin_messages=can_pin_messages,
            can_manage_topics=can_manage_topics,
        )

    async def set_chat_administrator_custom_title(
        self, *, chat_id: Union[int, str], user_id: int, custom_title: str
    ) -> bool:
        return await self.call_api(
            "setChatAdministratorCustomTitle",
            response_type=bool,
            chat_id=chat_id,
            user_id=user_id,
            custom_title=custom_title,
        )

    async def ban_chat_sender_chat(
        self, *, chat_id: Union[int, str], sender_chat_id: int
    ) -> bool:
        return await self.call_api(
            "banChatSenderChat",
            response_type=bool,
            chat_id=chat_id,
            sender_chat_id=sender_chat_id,
        )

    async def unban_chat_sender_chat(
        self, *, chat_id: Union[int, str], sender_chat_id: int
    ) -> bool:
        return await self.call_api(
            "unbanChatSenderChat",
            response_type=bool,
            chat_id=chat_id,
            sender_chat_id=sender_chat_id,
        )

    async def set_chat_permissions(
        self,
        *,
        chat_id: Union[int, str],
        permissions: ChatPermissions,
        use_independent_chat_permissions: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "setChatPermissions",
            response_type=bool,
            chat_id=chat_id,
            permissions=permissions,
            use_independent_chat_permissions=use_independent_chat_permissions,
        )

    async def export_chat_invite_link(self, *, chat_id: Union[int, str]) -> str:
        return await self.call_api(
            "exportChatInviteLink", response_type=str, chat_id=chat_id
        )

    async def create_chat_invite_link(
        self,
        *,
        chat_id: Union[int, str],
        name: str | None = None,
        expire_date: int | None = None,
        member_limit: int | None = None,
        creates_join_request: bool | None = None,
    ) -> ChatInviteLink:
        return await self.call_api(
            "createChatInviteLink",
            response_type=ChatInviteLink,
            chat_id=chat_id,
            name=name,
            expire_date=expire_date,
            member_limit=member_limit,
            creates_join_request=creates_join_request,
        )

    async def edit_chat_invite_link(
        self,
        *,
        chat_id: Union[int, str],
        invite_link: str,
        name: str | None = None,
        expire_date: int | None = None,
        member_limit: int | None = None,
        creates_join_request: bool | None = None,
    ) -> ChatInviteLink:
        return await self.call_api(
            "editChatInviteLink",
            response_type=ChatInviteLink,
            chat_id=chat_id,
            invite_link=invite_link,
            name=name,
            expire_date=expire_date,
            member_limit=member_limit,
            creates_join_request=creates_join_request,
        )

    async def create_chat_subscription_invite_link(
        self,
        *,
        chat_id: Union[int, str],
        subscription_period: int,
        subscription_price: int,
        name: str | None = None,
    ) -> ChatInviteLink:
        return await self.call_api(
            "createChatSubscriptionInviteLink",
            response_type=ChatInviteLink,
            chat_id=chat_id,
            name=name,
            subscription_period=subscription_period,
            subscription_price=subscription_price,
        )

    async def edit_chat_subscription_invite_link(
        self, *, chat_id: Union[int, str], invite_link: str, name: str | None = None
    ) -> ChatInviteLink:
        return await self.call_api(
            "editChatSubscriptionInviteLink",
            response_type=ChatInviteLink,
            chat_id=chat_id,
            invite_link=invite_link,
            name=name,
        )

    async def revoke_chat_invite_link(
        self, *, chat_id: Union[int, str], invite_link: str
    ) -> ChatInviteLink:
        return await self.call_api(
            "revokeChatInviteLink",
            response_type=ChatInviteLink,
            chat_id=chat_id,
            invite_link=invite_link,
        )

    async def approve_chat_join_request(
        self, *, chat_id: Union[int, str], user_id: int
    ) -> bool:
        return await self.call_api(
            "approveChatJoinRequest",
            response_type=bool,
            chat_id=chat_id,
            user_id=user_id,
        )

    async def decline_chat_join_request(
        self, *, chat_id: Union[int, str], user_id: int
    ) -> bool:
        return await self.call_api(
            "declineChatJoinRequest",
            response_type=bool,
            chat_id=chat_id,
            user_id=user_id,
        )

    async def set_chat_photo(
        self, *, chat_id: Union[int, str], photo: InputFile
    ) -> bool:
        return await self.call_api(
            "setChatPhoto", response_type=bool, chat_id=chat_id, photo=photo
        )

    async def delete_chat_photo(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "deleteChatPhoto", response_type=bool, chat_id=chat_id
        )

    async def set_chat_title(self, *, chat_id: Union[int, str], title: str) -> bool:
        return await self.call_api(
            "setChatTitle", response_type=bool, chat_id=chat_id, title=title
        )

    async def set_chat_description(
        self, *, chat_id: Union[int, str], description: str | None = None
    ) -> bool:
        return await self.call_api(
            "setChatDescription",
            response_type=bool,
            chat_id=chat_id,
            description=description,
        )

    async def pin_chat_message(
        self,
        *,
        chat_id: Union[int, str],
        message_id: int,
        business_connection_id: str | None = None,
        disable_notification: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "pinChatMessage",
            response_type=bool,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            disable_notification=disable_notification,
        )

    async def unpin_chat_message(
        self,
        *,
        chat_id: Union[int, str],
        business_connection_id: str | None = None,
        message_id: int | None = None,
    ) -> bool:
        return await self.call_api(
            "unpinChatMessage",
            response_type=bool,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
        )

    async def unpin_all_chat_messages(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "unpinAllChatMessages", response_type=bool, chat_id=chat_id
        )

    async def leave_chat(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api("leaveChat", response_type=bool, chat_id=chat_id)

    async def get_chat(self, *, chat_id: Union[int, str]) -> ChatFullInfo:
        return await self.call_api(
            "getChat", response_type=ChatFullInfo, chat_id=chat_id
        )

    async def get_chat_administrators(
        self, *, chat_id: Union[int, str]
    ) -> list[ChatMember]:
        return await self.call_api(
            "getChatAdministrators", response_type=list[ChatMember], chat_id=chat_id
        )

    async def get_chat_member_count(self, *, chat_id: Union[int, str]) -> int:
        return await self.call_api(
            "getChatMemberCount", response_type=int, chat_id=chat_id
        )

    async def get_chat_member(
        self, *, chat_id: Union[int, str], user_id: int
    ) -> ChatMember:
        return await self.call_api(
            "getChatMember", response_type=ChatMember, chat_id=chat_id, user_id=user_id
        )

    async def set_chat_sticker_set(
        self, *, chat_id: Union[int, str], sticker_set_name: str
    ) -> bool:
        return await self.call_api(
            "setChatStickerSet",
            response_type=bool,
            chat_id=chat_id,
            sticker_set_name=sticker_set_name,
        )

    async def delete_chat_sticker_set(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "deleteChatStickerSet", response_type=bool, chat_id=chat_id
        )

    async def get_forum_topic_icon_stickers(self) -> list[Sticker]:
        return await self.call_api(
            "getForumTopicIconStickers", response_type=list[Sticker]
        )

    async def create_forum_topic(
        self,
        *,
        chat_id: Union[int, str],
        name: str,
        icon_color: int | None = None,
        icon_custom_emoji_id: str | None = None,
    ) -> ForumTopic:
        return await self.call_api(
            "createForumTopic",
            response_type=ForumTopic,
            chat_id=chat_id,
            name=name,
            icon_color=icon_color,
            icon_custom_emoji_id=icon_custom_emoji_id,
        )

    async def edit_forum_topic(
        self,
        *,
        chat_id: Union[int, str],
        message_thread_id: int,
        name: str | None = None,
        icon_custom_emoji_id: str | None = None,
    ) -> bool:
        return await self.call_api(
            "editForumTopic",
            response_type=bool,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            name=name,
            icon_custom_emoji_id=icon_custom_emoji_id,
        )

    async def close_forum_topic(
        self, *, chat_id: Union[int, str], message_thread_id: int
    ) -> bool:
        return await self.call_api(
            "closeForumTopic",
            response_type=bool,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
        )

    async def reopen_forum_topic(
        self, *, chat_id: Union[int, str], message_thread_id: int
    ) -> bool:
        return await self.call_api(
            "reopenForumTopic",
            response_type=bool,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
        )

    async def delete_forum_topic(
        self, *, chat_id: Union[int, str], message_thread_id: int
    ) -> bool:
        return await self.call_api(
            "deleteForumTopic",
            response_type=bool,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
        )

    async def unpin_all_forum_topic_messages(
        self, *, chat_id: Union[int, str], message_thread_id: int
    ) -> bool:
        return await self.call_api(
            "unpinAllForumTopicMessages",
            response_type=bool,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
        )

    async def edit_general_forum_topic(
        self, *, chat_id: Union[int, str], name: str
    ) -> bool:
        return await self.call_api(
            "editGeneralForumTopic", response_type=bool, chat_id=chat_id, name=name
        )

    async def close_general_forum_topic(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "closeGeneralForumTopic", response_type=bool, chat_id=chat_id
        )

    async def reopen_general_forum_topic(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "reopenGeneralForumTopic", response_type=bool, chat_id=chat_id
        )

    async def hide_general_forum_topic(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "hideGeneralForumTopic", response_type=bool, chat_id=chat_id
        )

    async def unhide_general_forum_topic(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "unhideGeneralForumTopic", response_type=bool, chat_id=chat_id
        )

    async def unpin_all_general_forum_topic_messages(
        self, *, chat_id: Union[int, str]
    ) -> bool:
        return await self.call_api(
            "unpinAllGeneralForumTopicMessages", response_type=bool, chat_id=chat_id
        )

    async def answer_callback_query(
        self,
        *,
        callback_query_id: str,
        text: str | None = None,
        show_alert: bool | None = None,
        url: str | None = None,
        cache_time: int | None = None,
    ) -> bool:
        return await self.call_api(
            "answerCallbackQuery",
            response_type=bool,
            callback_query_id=callback_query_id,
            text=text,
            show_alert=show_alert,
            url=url,
            cache_time=cache_time,
        )

    async def get_user_chat_boosts(
        self, *, chat_id: Union[int, str], user_id: int
    ) -> UserChatBoosts:
        return await self.call_api(
            "getUserChatBoosts",
            response_type=UserChatBoosts,
            chat_id=chat_id,
            user_id=user_id,
        )

    async def get_business_connection(
        self, *, business_connection_id: str
    ) -> BusinessConnection:
        return await self.call_api(
            "getBusinessConnection",
            response_type=BusinessConnection,
            business_connection_id=business_connection_id,
        )

    async def set_my_commands(
        self,
        *,
        commands: list[BotCommand],
        scope: BotCommandScope | None = None,
        language_code: str | None = None,
    ) -> bool:
        return await self.call_api(
            "setMyCommands",
            response_type=bool,
            commands=commands,
            scope=scope,
            language_code=language_code,
        )

    async def delete_my_commands(
        self, *, scope: BotCommandScope | None = None, language_code: str | None = None
    ) -> bool:
        return await self.call_api(
            "deleteMyCommands",
            response_type=bool,
            scope=scope,
            language_code=language_code,
        )

    async def get_my_commands(
        self, *, scope: BotCommandScope | None = None, language_code: str | None = None
    ) -> list[BotCommand]:
        return await self.call_api(
            "getMyCommands",
            response_type=list[BotCommand],
            scope=scope,
            language_code=language_code,
        )

    async def set_my_name(
        self, *, name: str | None = None, language_code: str | None = None
    ) -> bool:
        return await self.call_api(
            "setMyName", response_type=bool, name=name, language_code=language_code
        )

    async def get_my_name(self, *, language_code: str | None = None) -> BotName:
        return await self.call_api(
            "getMyName", response_type=BotName, language_code=language_code
        )

    async def set_my_description(
        self, *, description: str | None = None, language_code: str | None = None
    ) -> bool:
        return await self.call_api(
            "setMyDescription",
            response_type=bool,
            description=description,
            language_code=language_code,
        )

    async def get_my_description(
        self, *, language_code: str | None = None
    ) -> BotDescription:
        return await self.call_api(
            "getMyDescription",
            response_type=BotDescription,
            language_code=language_code,
        )

    async def set_my_short_description(
        self, *, short_description: str | None = None, language_code: str | None = None
    ) -> bool:
        return await self.call_api(
            "setMyShortDescription",
            response_type=bool,
            short_description=short_description,
            language_code=language_code,
        )

    async def get_my_short_description(
        self, *, language_code: str | None = None
    ) -> BotShortDescription:
        return await self.call_api(
            "getMyShortDescription",
            response_type=BotShortDescription,
            language_code=language_code,
        )

    async def set_chat_menu_button(
        self, *, chat_id: int | None = None, menu_button: MenuButton | None = None
    ) -> bool:
        return await self.call_api(
            "setChatMenuButton",
            response_type=bool,
            chat_id=chat_id,
            menu_button=menu_button,
        )

    async def get_chat_menu_button(self, *, chat_id: int | None = None) -> MenuButton:
        return await self.call_api(
            "getChatMenuButton", response_type=MenuButton, chat_id=chat_id
        )

    async def set_my_default_administrator_rights(
        self,
        *,
        rights: ChatAdministratorRights | None = None,
        for_channels: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "setMyDefaultAdministratorRights",
            response_type=bool,
            rights=rights,
            for_channels=for_channels,
        )

    async def get_my_default_administrator_rights(
        self, *, for_channels: bool | None = None
    ) -> ChatAdministratorRights:
        return await self.call_api(
            "getMyDefaultAdministratorRights",
            response_type=ChatAdministratorRights,
            for_channels=for_channels,
        )

    async def edit_message_text(
        self,
        *,
        text: str,
        business_connection_id: str | None = None,
        chat_id: Union[int, str] | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        parse_mode: str | None = None,
        entities: list[MessageEntity] | None = None,
        link_preview_options: LinkPreviewOptions | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Union[Message, bool]:
        return await self.call_api(
            "editMessageText",
            response_type=Union[Message, bool],
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
            text=text,
            parse_mode=parse_mode,
            entities=entities,
            link_preview_options=link_preview_options,
            reply_markup=reply_markup,
        )

    async def edit_message_caption(
        self,
        *,
        business_connection_id: str | None = None,
        chat_id: Union[int, str] | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        show_caption_above_media: bool | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Union[Message, bool]:
        return await self.call_api(
            "editMessageCaption",
            response_type=Union[Message, bool],
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            show_caption_above_media=show_caption_above_media,
            reply_markup=reply_markup,
        )

    async def edit_message_media(
        self,
        *,
        media: InputMedia,
        business_connection_id: str | None = None,
        chat_id: Union[int, str] | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Union[Message, bool]:
        return await self.call_api(
            "editMessageMedia",
            response_type=Union[Message, bool],
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
            media=media,
            reply_markup=reply_markup,
        )

    async def edit_message_live_location(
        self,
        *,
        latitude: float,
        longitude: float,
        business_connection_id: str | None = None,
        chat_id: Union[int, str] | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        live_period: int | None = None,
        horizontal_accuracy: float | None = None,
        heading: int | None = None,
        proximity_alert_radius: int | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Union[Message, bool]:
        return await self.call_api(
            "editMessageLiveLocation",
            response_type=Union[Message, bool],
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
            latitude=latitude,
            longitude=longitude,
            live_period=live_period,
            horizontal_accuracy=horizontal_accuracy,
            heading=heading,
            proximity_alert_radius=proximity_alert_radius,
            reply_markup=reply_markup,
        )

    async def stop_message_live_location(
        self,
        *,
        business_connection_id: str | None = None,
        chat_id: Union[int, str] | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Union[Message, bool]:
        return await self.call_api(
            "stopMessageLiveLocation",
            response_type=Union[Message, bool],
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
            reply_markup=reply_markup,
        )

    async def edit_message_reply_markup(
        self,
        *,
        business_connection_id: str | None = None,
        chat_id: Union[int, str] | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Union[Message, bool]:
        return await self.call_api(
            "editMessageReplyMarkup",
            response_type=Union[Message, bool],
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
            reply_markup=reply_markup,
        )

    async def stop_poll(
        self,
        *,
        chat_id: Union[int, str],
        message_id: int,
        business_connection_id: str | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Poll:
        return await self.call_api(
            "stopPoll",
            response_type=Poll,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=reply_markup,
        )

    async def delete_message(
        self, *, chat_id: Union[int, str], message_id: int
    ) -> bool:
        return await self.call_api(
            "deleteMessage", response_type=bool, chat_id=chat_id, message_id=message_id
        )

    async def delete_messages(
        self, *, chat_id: Union[int, str], message_ids: list[int]
    ) -> bool:
        return await self.call_api(
            "deleteMessages",
            response_type=bool,
            chat_id=chat_id,
            message_ids=message_ids,
        )

    async def get_available_gifts(self) -> Gifts:
        return await self.call_api("getAvailableGifts", response_type=Gifts)

    async def send_gift(
        self,
        *,
        gift_id: str,
        user_id: int | None = None,
        chat_id: Union[int, str] | None = None,
        pay_for_upgrade: bool | None = None,
        text: str | None = None,
        text_parse_mode: str | None = None,
        text_entities: list[MessageEntity] | None = None,
    ) -> bool:
        return await self.call_api(
            "sendGift",
            response_type=bool,
            user_id=user_id,
            chat_id=chat_id,
            gift_id=gift_id,
            pay_for_upgrade=pay_for_upgrade,
            text=text,
            text_parse_mode=text_parse_mode,
            text_entities=text_entities,
        )

    async def gift_premium_subscription(
        self,
        *,
        user_id: int,
        month_count: int,
        star_count: int,
        text: str | None = None,
        text_parse_mode: str | None = None,
        text_entities: list[MessageEntity] | None = None,
    ) -> bool:
        return await self.call_api(
            "giftPremiumSubscription",
            response_type=bool,
            user_id=user_id,
            month_count=month_count,
            star_count=star_count,
            text=text,
            text_parse_mode=text_parse_mode,
            text_entities=text_entities,
        )

    async def verify_user(
        self, *, user_id: int, custom_description: str | None = None
    ) -> bool:
        return await self.call_api(
            "verifyUser",
            response_type=bool,
            user_id=user_id,
            custom_description=custom_description,
        )

    async def verify_chat(
        self, *, chat_id: Union[int, str], custom_description: str | None = None
    ) -> bool:
        return await self.call_api(
            "verifyChat",
            response_type=bool,
            chat_id=chat_id,
            custom_description=custom_description,
        )

    async def remove_user_verification(self, *, user_id: int) -> bool:
        return await self.call_api(
            "removeUserVerification", response_type=bool, user_id=user_id
        )

    async def remove_chat_verification(self, *, chat_id: Union[int, str]) -> bool:
        return await self.call_api(
            "removeChatVerification", response_type=bool, chat_id=chat_id
        )

    async def read_business_message(
        self, *, business_connection_id: str, chat_id: int, message_id: int
    ) -> bool:
        return await self.call_api(
            "readBusinessMessage",
            response_type=bool,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_id=message_id,
        )

    async def delete_business_messages(
        self, *, business_connection_id: str, message_ids: list[int]
    ) -> bool:
        return await self.call_api(
            "deleteBusinessMessages",
            response_type=bool,
            business_connection_id=business_connection_id,
            message_ids=message_ids,
        )

    async def set_business_account_name(
        self,
        *,
        business_connection_id: str,
        first_name: str,
        last_name: str | None = None,
    ) -> bool:
        return await self.call_api(
            "setBusinessAccountName",
            response_type=bool,
            business_connection_id=business_connection_id,
            first_name=first_name,
            last_name=last_name,
        )

    async def set_business_account_username(
        self, *, business_connection_id: str, username: str | None = None
    ) -> bool:
        return await self.call_api(
            "setBusinessAccountUsername",
            response_type=bool,
            business_connection_id=business_connection_id,
            username=username,
        )

    async def set_business_account_bio(
        self, *, business_connection_id: str, bio: str | None = None
    ) -> bool:
        return await self.call_api(
            "setBusinessAccountBio",
            response_type=bool,
            business_connection_id=business_connection_id,
            bio=bio,
        )

    async def set_business_account_profile_photo(
        self,
        *,
        business_connection_id: str,
        photo: InputProfilePhoto,
        is_public: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "setBusinessAccountProfilePhoto",
            response_type=bool,
            business_connection_id=business_connection_id,
            photo=photo,
            is_public=is_public,
        )

    async def remove_business_account_profile_photo(
        self, *, business_connection_id: str, is_public: bool | None = None
    ) -> bool:
        return await self.call_api(
            "removeBusinessAccountProfilePhoto",
            response_type=bool,
            business_connection_id=business_connection_id,
            is_public=is_public,
        )

    async def set_business_account_gift_settings(
        self,
        *,
        business_connection_id: str,
        show_gift_button: bool,
        accepted_gift_types: AcceptedGiftTypes,
    ) -> bool:
        return await self.call_api(
            "setBusinessAccountGiftSettings",
            response_type=bool,
            business_connection_id=business_connection_id,
            show_gift_button=show_gift_button,
            accepted_gift_types=accepted_gift_types,
        )

    async def get_business_account_star_balance(
        self, *, business_connection_id: str
    ) -> StarAmount:
        return await self.call_api(
            "getBusinessAccountStarBalance",
            response_type=StarAmount,
            business_connection_id=business_connection_id,
        )

    async def transfer_business_account_stars(
        self, *, business_connection_id: str, star_count: int
    ) -> bool:
        return await self.call_api(
            "transferBusinessAccountStars",
            response_type=bool,
            business_connection_id=business_connection_id,
            star_count=star_count,
        )

    async def get_business_account_gifts(
        self,
        *,
        business_connection_id: str,
        exclude_unsaved: bool | None = None,
        exclude_saved: bool | None = None,
        exclude_unlimited: bool | None = None,
        exclude_limited: bool | None = None,
        exclude_unique: bool | None = None,
        sort_by_price: bool | None = None,
        offset: str | None = None,
        limit: int | None = None,
    ) -> OwnedGifts:
        return await self.call_api(
            "getBusinessAccountGifts",
            response_type=OwnedGifts,
            business_connection_id=business_connection_id,
            exclude_unsaved=exclude_unsaved,
            exclude_saved=exclude_saved,
            exclude_unlimited=exclude_unlimited,
            exclude_limited=exclude_limited,
            exclude_unique=exclude_unique,
            sort_by_price=sort_by_price,
            offset=offset,
            limit=limit,
        )

    async def convert_gift_to_stars(
        self, *, business_connection_id: str, owned_gift_id: str
    ) -> bool:
        return await self.call_api(
            "convertGiftToStars",
            response_type=bool,
            business_connection_id=business_connection_id,
            owned_gift_id=owned_gift_id,
        )

    async def upgrade_gift(
        self,
        *,
        business_connection_id: str,
        owned_gift_id: str,
        keep_original_details: bool | None = None,
        star_count: int | None = None,
    ) -> bool:
        return await self.call_api(
            "upgradeGift",
            response_type=bool,
            business_connection_id=business_connection_id,
            owned_gift_id=owned_gift_id,
            keep_original_details=keep_original_details,
            star_count=star_count,
        )

    async def transfer_gift(
        self,
        *,
        business_connection_id: str,
        owned_gift_id: str,
        new_owner_chat_id: int,
        star_count: int | None = None,
    ) -> bool:
        return await self.call_api(
            "transferGift",
            response_type=bool,
            business_connection_id=business_connection_id,
            owned_gift_id=owned_gift_id,
            new_owner_chat_id=new_owner_chat_id,
            star_count=star_count,
        )

    async def post_story(
        self,
        *,
        business_connection_id: str,
        content: InputStoryContent,
        active_period: int,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        areas: list[StoryArea] | None = None,
        post_to_chat_page: bool | None = None,
        protect_content: bool | None = None,
    ) -> Story:
        return await self.call_api(
            "postStory",
            response_type=Story,
            business_connection_id=business_connection_id,
            content=content,
            active_period=active_period,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            areas=areas,
            post_to_chat_page=post_to_chat_page,
            protect_content=protect_content,
        )

    async def edit_story(
        self,
        *,
        business_connection_id: str,
        story_id: int,
        content: InputStoryContent,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        areas: list[StoryArea] | None = None,
    ) -> Story:
        return await self.call_api(
            "editStory",
            response_type=Story,
            business_connection_id=business_connection_id,
            story_id=story_id,
            content=content,
            caption=caption,
            parse_mode=parse_mode,
            caption_entities=caption_entities,
            areas=areas,
        )

    async def delete_story(self, *, business_connection_id: str, story_id: int) -> bool:
        return await self.call_api(
            "deleteStory",
            response_type=bool,
            business_connection_id=business_connection_id,
            story_id=story_id,
        )

    async def send_sticker(
        self,
        *,
        chat_id: Union[int, str],
        sticker: Union[InputFile, str],
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        emoji: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: Union[
            InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
        ]
        | None = None,
    ) -> Message:
        return await self.call_api(
            "sendSticker",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            sticker=sticker,
            emoji=emoji,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def get_sticker_set(self, *, name: str) -> StickerSet:
        return await self.call_api("getStickerSet", response_type=StickerSet, name=name)

    async def get_custom_emoji_stickers(
        self, *, custom_emoji_ids: list[str]
    ) -> list[Sticker]:
        return await self.call_api(
            "getCustomEmojiStickers",
            response_type=list[Sticker],
            custom_emoji_ids=custom_emoji_ids,
        )

    async def upload_sticker_file(
        self, *, user_id: int, sticker: InputFile, sticker_format: str
    ) -> File:
        return await self.call_api(
            "uploadStickerFile",
            response_type=File,
            user_id=user_id,
            sticker=sticker,
            sticker_format=sticker_format,
        )

    async def create_new_sticker_set(
        self,
        *,
        user_id: int,
        name: str,
        title: str,
        stickers: list[InputSticker],
        sticker_type: str | None = None,
        needs_repainting: bool | None = None,
    ) -> bool:
        return await self.call_api(
            "createNewStickerSet",
            response_type=bool,
            user_id=user_id,
            name=name,
            title=title,
            stickers=stickers,
            sticker_type=sticker_type,
            needs_repainting=needs_repainting,
        )

    async def add_sticker_to_set(
        self, *, user_id: int, name: str, sticker: InputSticker
    ) -> bool:
        return await self.call_api(
            "addStickerToSet",
            response_type=bool,
            user_id=user_id,
            name=name,
            sticker=sticker,
        )

    async def set_sticker_position_in_set(self, *, sticker: str, position: int) -> bool:
        return await self.call_api(
            "setStickerPositionInSet",
            response_type=bool,
            sticker=sticker,
            position=position,
        )

    async def delete_sticker_from_set(self, *, sticker: str) -> bool:
        return await self.call_api(
            "deleteStickerFromSet", response_type=bool, sticker=sticker
        )

    async def replace_sticker_in_set(
        self, *, user_id: int, name: str, old_sticker: str, sticker: InputSticker
    ) -> bool:
        return await self.call_api(
            "replaceStickerInSet",
            response_type=bool,
            user_id=user_id,
            name=name,
            old_sticker=old_sticker,
            sticker=sticker,
        )

    async def set_sticker_emoji_list(
        self, *, sticker: str, emoji_list: list[str]
    ) -> bool:
        return await self.call_api(
            "setStickerEmojiList",
            response_type=bool,
            sticker=sticker,
            emoji_list=emoji_list,
        )

    async def set_sticker_keywords(
        self, *, sticker: str, keywords: list[str] | None = None
    ) -> bool:
        return await self.call_api(
            "setStickerKeywords", response_type=bool, sticker=sticker, keywords=keywords
        )

    async def set_sticker_mask_position(
        self, *, sticker: str, mask_position: MaskPosition | None = None
    ) -> bool:
        return await self.call_api(
            "setStickerMaskPosition",
            response_type=bool,
            sticker=sticker,
            mask_position=mask_position,
        )

    async def set_sticker_set_title(self, *, name: str, title: str) -> bool:
        return await self.call_api(
            "setStickerSetTitle", response_type=bool, name=name, title=title
        )

    async def set_sticker_set_thumbnail(
        self,
        *,
        name: str,
        user_id: int,
        format: str,
        thumbnail: Union[InputFile, str] | None = None,
    ) -> bool:
        return await self.call_api(
            "setStickerSetThumbnail",
            response_type=bool,
            name=name,
            user_id=user_id,
            thumbnail=thumbnail,
            format=format,
        )

    async def set_custom_emoji_sticker_set_thumbnail(
        self, *, name: str, custom_emoji_id: str | None = None
    ) -> bool:
        return await self.call_api(
            "setCustomEmojiStickerSetThumbnail",
            response_type=bool,
            name=name,
            custom_emoji_id=custom_emoji_id,
        )

    async def delete_sticker_set(self, *, name: str) -> bool:
        return await self.call_api("deleteStickerSet", response_type=bool, name=name)

    async def answer_inline_query(
        self,
        *,
        inline_query_id: str,
        results: list[InlineQueryResult],
        cache_time: int | None = None,
        is_personal: bool | None = None,
        next_offset: str | None = None,
        button: InlineQueryResultsButton | None = None,
    ) -> bool:
        return await self.call_api(
            "answerInlineQuery",
            response_type=bool,
            inline_query_id=inline_query_id,
            results=results,
            cache_time=cache_time,
            is_personal=is_personal,
            next_offset=next_offset,
            button=button,
        )

    async def answer_web_app_query(
        self, *, web_app_query_id: str, result: InlineQueryResult
    ) -> SentWebAppMessage:
        return await self.call_api(
            "answerWebAppQuery",
            response_type=SentWebAppMessage,
            web_app_query_id=web_app_query_id,
            result=result,
        )

    async def save_prepared_inline_message(
        self,
        *,
        user_id: int,
        result: InlineQueryResult,
        allow_user_chats: bool | None = None,
        allow_bot_chats: bool | None = None,
        allow_group_chats: bool | None = None,
        allow_channel_chats: bool | None = None,
    ) -> PreparedInlineMessage:
        return await self.call_api(
            "savePreparedInlineMessage",
            response_type=PreparedInlineMessage,
            user_id=user_id,
            result=result,
            allow_user_chats=allow_user_chats,
            allow_bot_chats=allow_bot_chats,
            allow_group_chats=allow_group_chats,
            allow_channel_chats=allow_channel_chats,
        )

    async def send_invoice(
        self,
        *,
        chat_id: Union[int, str],
        title: str,
        description: str,
        payload: str,
        currency: str,
        prices: list[LabeledPrice],
        message_thread_id: int | None = None,
        provider_token: str | None = None,
        max_tip_amount: int | None = None,
        suggested_tip_amounts: list[int] | None = None,
        start_parameter: str | None = None,
        provider_data: str | None = None,
        photo_url: str | None = None,
        photo_size: int | None = None,
        photo_width: int | None = None,
        photo_height: int | None = None,
        need_name: bool | None = None,
        need_phone_number: bool | None = None,
        need_email: bool | None = None,
        need_shipping_address: bool | None = None,
        send_phone_number_to_provider: bool | None = None,
        send_email_to_provider: bool | None = None,
        is_flexible: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message:
        return await self.call_api(
            "sendInvoice",
            response_type=Message,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=provider_token,
            currency=currency,
            prices=prices,
            max_tip_amount=max_tip_amount,
            suggested_tip_amounts=suggested_tip_amounts,
            start_parameter=start_parameter,
            provider_data=provider_data,
            photo_url=photo_url,
            photo_size=photo_size,
            photo_width=photo_width,
            photo_height=photo_height,
            need_name=need_name,
            need_phone_number=need_phone_number,
            need_email=need_email,
            need_shipping_address=need_shipping_address,
            send_phone_number_to_provider=send_phone_number_to_provider,
            send_email_to_provider=send_email_to_provider,
            is_flexible=is_flexible,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def create_invoice_link(
        self,
        *,
        title: str,
        description: str,
        payload: str,
        currency: str,
        prices: list[LabeledPrice],
        business_connection_id: str | None = None,
        provider_token: str | None = None,
        subscription_period: int | None = None,
        max_tip_amount: int | None = None,
        suggested_tip_amounts: list[int] | None = None,
        provider_data: str | None = None,
        photo_url: str | None = None,
        photo_size: int | None = None,
        photo_width: int | None = None,
        photo_height: int | None = None,
        need_name: bool | None = None,
        need_phone_number: bool | None = None,
        need_email: bool | None = None,
        need_shipping_address: bool | None = None,
        send_phone_number_to_provider: bool | None = None,
        send_email_to_provider: bool | None = None,
        is_flexible: bool | None = None,
    ) -> str:
        return await self.call_api(
            "createInvoiceLink",
            response_type=str,
            business_connection_id=business_connection_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=provider_token,
            currency=currency,
            prices=prices,
            subscription_period=subscription_period,
            max_tip_amount=max_tip_amount,
            suggested_tip_amounts=suggested_tip_amounts,
            provider_data=provider_data,
            photo_url=photo_url,
            photo_size=photo_size,
            photo_width=photo_width,
            photo_height=photo_height,
            need_name=need_name,
            need_phone_number=need_phone_number,
            need_email=need_email,
            need_shipping_address=need_shipping_address,
            send_phone_number_to_provider=send_phone_number_to_provider,
            send_email_to_provider=send_email_to_provider,
            is_flexible=is_flexible,
        )

    async def answer_shipping_query(
        self,
        *,
        shipping_query_id: str,
        ok: bool,
        shipping_options: list[ShippingOption] | None = None,
        error_message: str | None = None,
    ) -> bool:
        return await self.call_api(
            "answerShippingQuery",
            response_type=bool,
            shipping_query_id=shipping_query_id,
            ok=ok,
            shipping_options=shipping_options,
            error_message=error_message,
        )

    async def answer_pre_checkout_query(
        self, *, pre_checkout_query_id: str, ok: bool, error_message: str | None = None
    ) -> bool:
        return await self.call_api(
            "answerPreCheckoutQuery",
            response_type=bool,
            pre_checkout_query_id=pre_checkout_query_id,
            ok=ok,
            error_message=error_message,
        )

    async def get_star_transactions(
        self, *, offset: int | None = None, limit: int | None = None
    ) -> StarTransactions:
        return await self.call_api(
            "getStarTransactions",
            response_type=StarTransactions,
            offset=offset,
            limit=limit,
        )

    async def refund_star_payment(
        self, *, user_id: int, telegram_payment_charge_id: str
    ) -> bool:
        return await self.call_api(
            "refundStarPayment",
            response_type=bool,
            user_id=user_id,
            telegram_payment_charge_id=telegram_payment_charge_id,
        )

    async def edit_user_star_subscription(
        self, *, user_id: int, telegram_payment_charge_id: str, is_canceled: bool
    ) -> bool:
        return await self.call_api(
            "editUserStarSubscription",
            response_type=bool,
            user_id=user_id,
            telegram_payment_charge_id=telegram_payment_charge_id,
            is_canceled=is_canceled,
        )

    async def set_passport_data_errors(
        self, *, user_id: int, errors: list[PassportElementError]
    ) -> bool:
        return await self.call_api(
            "setPassportDataErrors", response_type=bool, user_id=user_id, errors=errors
        )

    async def send_game(
        self,
        *,
        chat_id: int,
        game_short_name: str,
        business_connection_id: str | None = None,
        message_thread_id: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        allow_paid_broadcast: bool | None = None,
        message_effect_id: str | None = None,
        reply_parameters: ReplyParameters | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message:
        return await self.call_api(
            "sendGame",
            response_type=Message,
            business_connection_id=business_connection_id,
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            game_short_name=game_short_name,
            disable_notification=disable_notification,
            protect_content=protect_content,
            allow_paid_broadcast=allow_paid_broadcast,
            message_effect_id=message_effect_id,
            reply_parameters=reply_parameters,
            reply_markup=reply_markup,
        )

    async def set_game_score(
        self,
        *,
        user_id: int,
        score: int,
        force: bool | None = None,
        disable_edit_message: bool | None = None,
        chat_id: int | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
    ) -> Union[Message, bool]:
        return await self.call_api(
            "setGameScore",
            response_type=Union[Message, bool],
            user_id=user_id,
            score=score,
            force=force,
            disable_edit_message=disable_edit_message,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
        )

    async def get_game_high_scores(
        self,
        *,
        user_id: int,
        chat_id: int | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
    ) -> list[GameHighScore]:
        return await self.call_api(
            "getGameHighScores",
            response_type=list[GameHighScore],
            user_id=user_id,
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
        )
