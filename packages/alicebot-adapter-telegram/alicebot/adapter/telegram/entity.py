"""Telegram Entity 模型。"""
# autogenerated by codegen.py, do not edit manually.
# ruff: noqa: D101, D102
# pylint: disable=missing-class-docstring

from typing import Optional
from typing_extensions import Self

from alicebot.message import MessageSegment, MessageT

from .model import User


class Entity(MessageSegment[MessageT]):
    @classmethod
    def mention(cls, text: str) -> Self:
        return cls(type="mention", data={"text": text})

    @classmethod
    def hashtag(cls, text: str) -> Self:
        return cls(type="hashtag", data={"text": text})

    @classmethod
    def cashtag(cls, text: str) -> Self:
        return cls(type="cashtag", data={"text": text})

    @classmethod
    def bot_command(cls, text: str) -> Self:
        return cls(type="bot_command", data={"text": text})

    @classmethod
    def url(cls, text: str) -> Self:
        return cls(type="url", data={"text": text})

    @classmethod
    def email(cls, text: str) -> Self:
        return cls(type="email", data={"text": text})

    @classmethod
    def phone_number(cls, text: str) -> Self:
        return cls(type="phone_number", data={"text": text})

    @classmethod
    def bold(cls, text: str) -> Self:
        return cls(type="bold", data={"text": text})

    @classmethod
    def italic(cls, text: str) -> Self:
        return cls(type="italic", data={"text": text})

    @classmethod
    def underline(cls, text: str) -> Self:
        return cls(type="underline", data={"text": text})

    @classmethod
    def strikethrough(cls, text: str) -> Self:
        return cls(type="strikethrough", data={"text": text})

    @classmethod
    def spoiler(cls, text: str) -> Self:
        return cls(type="spoiler", data={"text": text})

    @classmethod
    def blockquote(cls, text: str) -> Self:
        return cls(type="blockquote", data={"text": text})

    @classmethod
    def expandable_blockquote(cls, text: str) -> Self:
        return cls(type="expandable_blockquote", data={"text": text})

    @classmethod
    def code(cls, text: str) -> Self:
        return cls(type="code", data={"text": text})

    @classmethod
    def pre(cls, text: str, language: Optional[str] = None) -> Self:
        return cls(type="pre", data={"text": text, "language": language})

    @classmethod
    def text_link(cls, text: str, url: Optional[str] = None) -> Self:
        return cls(type="text_link", data={"text": text, "url": url})

    @classmethod
    def text_mention(cls, text: str, user: Optional[User] = None) -> Self:
        return cls(type="text_mention", data={"text": text, "user": user})

    @classmethod
    def custom_emoji(cls, text: str, custom_emoji_id: Optional[str] = None) -> Self:
        return cls(
            type="custom_emoji", data={"text": text, "custom_emoji_id": custom_emoji_id}
        )
