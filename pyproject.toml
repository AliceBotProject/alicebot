[project]
name = "alicebot"
version = "0.7.1"
description = "A simply asynchronous python chatbot framework."
authors = [{ name = "st1020", email = "stone_1020@qq.com" }]
license = { text = "MIT" }
readme = "README.md"
keywords = ["bot", "chatbot", "qq", "qqbot", "cqhttp", "coolq"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Framework :: AsyncIO",
  "Framework :: Robot Framework",
  "Framework :: Robot Framework :: Library",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Topic :: Communications :: Chat",
]
requires-python = ">=3.8"
dependencies = [
  "tomli>=2.0.0,<3.0.0;python_version<'3.11'",
  "pydantic>=2.0.3,<3.0.0",
  "aiohttp>=3.8.0,<4.0.0",
  "loguru>=0.7.0,<0.8.0",
  "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
cqhttp = ["alicebot-adapter-cqhttp"]
onebot = ["alicebot-adapter-onebot"]
mirai = ["alicebot-adapter-mirai"]
dingtalk = ["alicebot-adapter-dingtalk"]
apscheduler = ["alicebot-adapter-apscheduler"]
hot_reload = ["watchfiles"]
all = [
  "alicebot-adapter-cqhttp",
  "alicebot-adapter-onebot",
  "alicebot-adapter-mirai",
  "alicebot-adapter-dingtalk",
  "alicebot-adapter-apscheduler",
  "watchfiles",
]

[tool.pdm.dev-dependencies]
dev = [
  "-e alicebot-adapter-cqhttp @ {root:uri}/packages/alicebot-adapter-cqhttp",
  "-e alicebot-adapter-onebot @ {root:uri}/packages/alicebot-adapter-onebot",
  "-e alicebot-adapter-mirai @ {root:uri}/packages/alicebot-adapter-mirai",
  "-e alicebot-adapter-dingtalk @ {root:uri}/packages/alicebot-adapter-dingtalk",
  "-e alicebot-adapter-apscheduler @ {root:uri}/packages/alicebot-adapter-apscheduler",
]
lint = ["black", "ruff"]
docs = ["sophia-doc~=0.1.4", "tomlkit~=0.11.7"]

[project.urls]
Homepage = "https://docs.alicebot.dev/"
Documentation = "https://docs.alicebot.dev/"
Repository = "https://github.com/AliceBotProject/alicebot"
Changelog = "https://docs.alicebot.dev/changelog.html"

[tool.black]
target-version = ["py38", "py39", "py310", "py311"]

[tool.ruff]
line-length = 88
select = [
  "F",     # Pyflakes
  "E",     # pycodestyle errors
  "W",     # pycodestyle warnings
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "B",     # flake8-bugbear
  "C4",    # flake8-comprehensions
  "DTZ",   # flake8-datetimez
  "T10",   # flake8-debugger
  "FA",    # flake8-future-annotations
  "ISC",   # flake8-implicit-str-concat
  "G",     # flake8-logging-format
  "PIE",   # flake8-pie
  "T20",   # flake8-print
  "Q",     # flake8-quotes
  "RSE",   # flake8-raise
  "RET",   # flake8-return
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "SIM",   # flake8-simplify
  "TCH",   # flake8-type-checking
  "INT",   # flake8-gettext
  "ARG",   # flake8-unused-arguments
  "TD",    # flake8-todos
  "FIX",   # flake8-fixme
  "ERA",   # eradicate
  "PGH",   # pygrep-hooks
  "PL",    # Pylint
  "TRY",   # tryceratops
  "FLY",   # flynt
  "PERF",  # Perflint
  "RUF",   # Ruff-specific rules
]
ignore = [
  "E501",    # Line too long, handled by black
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic method
  "D106",    # Missing docstring in public nested class
  "D415",    # First line should end with a period, question mark, or exclamation point
  "S101",    # Use of assert detected
  "PGH003",  # Use specific rule codes when ignoring type issues
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "TRY003",  # Avoid specifying long messages outside the exception class
  "PERF203", # try-except within a loop incurs performance overhead
  "RUF001",  # String contains ambiguous unicode character string
  "RUF002",  # Docstring contains ambiguous unicode character string
  "RUF003",  # Comment contains ambiguous unicode character string
]
target-version = "py38"

[tool.ruff.isort]
known-third-party = ["pydantic", "aiohttp", "loguru"]
extra-standard-library = ["typing_extensions"]
force-sort-within-sections = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F403"]
".release.py" = ["S603", "S607"]
"examples/test.py" = ["D"]
"examples/plugins/*.py" = ["D", "T"]

[tool.pyright]
exclude = [".venv", "examples/plugins"]
pythonVersion = "3.8"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportIncompatibleMethodOverride = false
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnnecessaryIsInstance = false
reportPropertyTypeMismatch = true

[tool.hatch.build.targets.sdist]
include = ["/README.md", "/alicebot"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
